plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

apply from: '../modprops.gradle'
archivesBaseName = project.archives_base_name
version = project.mod_version + "-Fabric-${rootProject.minecraft_version}"
group = project.maven_group

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":${project.modid}-common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":${project.modid}-common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":${project.modid}-common", configuration: "transformProductionFabric")) { transitive = false }
    
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-rc.3")))
    
    // Forge config API port
    implementation 'com.electronwill.night-config:core:3.6.3'
    implementation 'com.electronwill.night-config:toml:3.6.3'
    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:6.0.2"
    
    // TODO
    // Runtime only mods
    // Catalogue (1.19+) or Mod Menu
    //modLocalRuntime "curse.maven:catalogue-fabric-667377:4590891"
    // Mod Menu 1.18.2
    //modLocalRuntime "curse.maven:modmenu-308702:4145213"
    // Configured (Config GUI) 1.18.2
    //modLocalRuntime "curse.maven:configured-457570:4462832"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":${project.modid}-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = project.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
